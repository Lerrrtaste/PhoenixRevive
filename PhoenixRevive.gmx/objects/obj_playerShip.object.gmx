<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_playerShip</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>dirspeed = 0; // negative: moving left positive: moving right
max_speed = room_speed/16; //pixel per frame
acceleration = 4;
slowdown = 2;
subimg = 0;
img_buffer = 0;

fire_cooldown = room_speed/2; //min steps between fire
f_cooldown = 0; //temp val for messurement

shield = 0; //shield activated ?
shield_duration = room_speed *2; 
shield_cooldown = room_speed * 5;
s1_cooldown = 0;//temp val for messurement
s2_cooldown = 0;

y = room_height - sprite_get_height(spr_playerShip *3);
x = room_width /2;

x_min = room_width/4 ;
x_max = (room_width/4)*3;

toDrawSelf = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>toDrawSelf = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//input mapping
button_left = ord('A');
button_right = ord('D');
button_shoot = vk_space;
button_shield = vk_shift;

//input checking
button_left_pressed = keyboard_check(button_left);
button_right_pressed = keyboard_check(button_right);
button_shoot_pressed = keyboard_check(button_shoot);
button_shield_pressed = keyboard_check_pressed(button_shield);

//actions

hspeed = 0; //idle when nothing pressed

//cooldowns
if f_cooldown &gt; 0 { f_cooldown--; }
if (s1_cooldown &gt; 0) { s1_cooldown--; }
if (s2_cooldown &gt; 0) { s2_cooldown--; }

if (button_left_pressed &amp;&amp; (x &gt;= x_min) &amp;&amp; toDrawSelf != 0) { //left
    hspeed = max_speed * -1;
}

if (button_right_pressed &amp;&amp; (x &lt;= x_max) &amp;&amp; toDrawSelf != 0) { //right
    hspeed = max_speed;
}

if (button_shoot_pressed) { //shoot
    if f_cooldown &lt;= 0 {
        if room == rm_level_2 { //double shoot for level 2
        instance_create(x,y,obj_player_projectile);
        instance_create(x,y-15,obj_player_projectile);  
        f_cooldown = fire_cooldown;
        } else { //standard shooting
        instance_create(x,y,obj_player_projectile); 
        f_cooldown = fire_cooldown;
        }
    }
}

if (button_shield_pressed &amp;&amp; s1_cooldown &lt;= 0) { //shield
    shield = 1;
    s1_cooldown = shield_cooldown;
    s2_cooldown = shield_duration;
}

if (shield == 1 &amp;&amp; s2_cooldown == 0) { //reset shield
    shield = 0;
}

if (shield == 1) { hspeed = 0; } //prevent movement when shield active

//collisions
/*
colliding_inst = instance_place(x, y, obj_playerShip);

if (colliding_inst != noone) {
    if( (object_get_name(colliding_inst.object_index) == "obj_enemy_fighter") ||
        (object_get_name(colliding_inst.object_index) == "obj_enemy_fighter_projectile")) { //is colliding w/ evil obj
        
            global.playerLives -= 1;
            toDrawSelf = 0;
            instance_create(x,y,obj_player_pieces);
            instance_create(x,y,obj_player_pieces);
            instance_create(x,y,obj_player_pieces);
            instance_create(x,y,obj_player_pieces);
            instance_create(x,y,obj_player_pieces); 
            instance_destroy(colliding_inst);
            alarm[0] = room_speed * 3;
            
    }
}
*/

/*
if (button_left_pressed) {
    dirspeed = clamp(dirspeed-acceleration, max_speed * -1, max_speed);
}

if (button_right_pressed) {
    dirspeed = clamp(dirspeed+acceleration, max_speed * -1, max_speed);
}

if dirspeed &gt; 0 {
    dirspeed =- slowdown;
}

if dirspeed &lt; 0 {
    dirspeed =+ slowdown;
}

hspeed = dirspeed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_enemy_fighter">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ((other != noone) &amp;&amp; (toDrawSelf != 0) &amp;&amp; shield == 0) {
    scr_player_colliding(other);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_enemy_fighter_projectile">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ((other != noone) &amp;&amp; (toDrawSelf != 0) &amp;&amp; shield == 0) {
    scr_player_colliding(other);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (img_buffer == 1) { //depends on room speed
    img_buffer = 0;
    if speed == 0 &amp;&amp; shield == 0 {subimg = 0;}
    else if subimg &gt;= 3 &amp;&amp; shield == 0 { subimg = 0; }
    else if subimg == image_number &amp;&amp; shield == 1 {subimg = 4; }
    else {subimg++; }
} else { img_buffer++; }

if (toDrawSelf == 1) {
    draw_sprite_stretched(  spr_playerShip,subimg,x,y,
                            sprite_get_width(spr_playerShip)*global.sprite_resize,
                            sprite_get_height(spr_playerShip)*global.sprite_resize);
}   
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
